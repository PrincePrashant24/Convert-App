{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","useState","color","className","mode","href","title","type","id","to","onClick","toggleMode","role","htmlFor","darkMode","TextForm","text","setText","style","backgroundColor","value","onChange","event","target","rows","btnmode","newText","toUpperCase","showAlert","toLowerCase","split","length","About","myStyle","setMyStyle","btntext","setBtnText","Alert","height","alert","msg","App","setmode","setAlert","message","setTimeout","setbtnmode","setDarkMode","document","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.87770f3a.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport React from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n\r\n \r\n  const [myStyle, setMyStyle] = useState({\r\n    color: 'black'\r\n});\r\n \r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li>\r\n          \r\n             \r\n            </ul>\r\n              <div className={`form-check form-switch bg-green text-${props.mode === 'light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\"  htmlFor=\"flexSwitchCheckDefault\">{props.darkMode}</label>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    const handleOnChange = (event)=>{\r\n        \r\n         setText(event.target.value);\r\n    }\r\n    const handleUpChange = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted into Uppercase\",\"success\");\r\n    }\r\n    const handleLoChange = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted into Lowercase\",\"success\");\r\n    }\r\n    \r\n\r\n  \r\n    \r\n    return (\r\n      \r\n        <>\r\n        <div className=\"container\"  style={{color: props.mode === 'dark'?'white':'black'}} >\r\n          \r\n            <div className=\"mb-3\">\r\n             <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">Enter Your Text Here</label>\r\n             <textarea className=\"form-control\" style={{backgroundColor: props.mode === 'dark'?'#3f2474':'white', color: props.mode === 'dark'?'white':'black'}} value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"9\"></textarea>\r\n            </div>\r\n            <button className={`btn btn-${props.btnmode}`} onClick={handleUpChange}>Convert to Uppercase</button> &nbsp;\r\n            <button className={`btn btn-${props.btnmode}`}  onClick={handleLoChange}>Convert to Lowercase</button>\r\n            \r\n        </div>\r\n        <div className=\"container my-4\"  style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(\" \").length} words and {text.length} Characters</p>\r\n\r\n        </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    });\r\n    const [btntext, setBtnText] = useState('Enable Dark Mode');\r\n    const btnDarkMode = ()=>{\r\n            if(myStyle.color == 'black')\r\n            {\r\n                setMyStyle({\r\n                    color: 'white',\r\n                    backgroundColor: 'black'\r\n                })\r\n                setBtnText(\"Enable Light Mode\");\r\n            }\r\n            else{\r\n                setMyStyle({\r\n                    color: 'black',\r\n                    backgroundColor: 'white'\r\n                })\r\n                setBtnText(\"Enable Dark Mode\");\r\n            }\r\n    }\r\n \r\n\r\n   \r\n    return (\r\n      \r\n    <>\r\n    <div className=\"container\" style={myStyle}> \r\n    <h1 className=\"my-3\">About Us</h1>\r\n         <div className=\"accordion\"   id=\"accordionExample\">\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    Accordion Item #1\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle}  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle} >\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div className=\"container my-2\">\r\n            <button type=\"button\"  className=\"btn btn-primary my-3\" onClick={btnDarkMode}>{btntext}</button>\r\n            </div>\r\n  </div>\r\n  </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        <div style={{height:'70px'}}>\r\n       { props.alert &&\r\n         <div className={`alert alert-${props.alert.type} alert-dismissible fade show`}  role=\"alert\">\r\n         <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n const [mode, setmode] = useState('light')\n const [alert, setAlert] = useState(null)\n const showAlert =(message, type)=>{\n   setAlert({\n     msg: message,\n     type: type\n   })\n   setTimeout(() => {\n    setAlert(null);\n   }, 2000);\n\n }\n const [btnmode, setbtnmode] = useState('success')\n const [darkMode, setDarkMode] = useState('Enable Dark Mode')\n const toggleMode = ()=>{\n   if(mode === 'light')\n   {\n     setmode('dark');\n     setDarkMode('Disable Dark Mode');\n     document.body.style.backgroundColor = '#3f2474';\n     setbtnmode('dark');\n     showAlert(\"Dark mode enabled\",\"success\");\n\n   }\n   else{\n    setmode('light');\n    setDarkMode('Enable Dark Mode');\n    document.body.style.backgroundColor = 'white';\n    setbtnmode('success');\n    showAlert('Light mode enabled','success');\n   }\n }\n  return (\n    <>\n    <Router>\n   <Navbar title=\"Prashant\" mode={mode} toggleMode={toggleMode} darkMode={darkMode}   />\n   <Alert alert={alert}></Alert>\n   \n   <div className=\"container\">\n     \n   <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n          <TextForm mode={mode} btnmode={btnmode} showAlert={showAlert} />\n          </Route>\n  </Switch>\n   </div>\n   </Router>\n\n\n   \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}